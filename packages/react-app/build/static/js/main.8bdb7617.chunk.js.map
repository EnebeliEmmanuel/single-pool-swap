{"version":3,"sources":["constants.js","components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Events.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/TokenBalance.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","components/Curve.jsx","components/DEX.jsx","components/AdvancedModeSwitch.jsx","components/SwapFormRow.jsx","components/SwapTab.jsx","components/PoolFormRow.jsx","components/PoolTab.jsx","components/Tabs.jsx","views/Home.jsx","views/ExampleUI.jsx","views/Hints.jsx","views/Subgraph.jsx","views/SimpleUI.jsx","App.jsx","index.jsx","contracts/external_contracts.js"],"names":["INFURA_ID","BLOCKNATIVE_DAPPID","ALCHEMY_KEY","NETWORKS","localhost","name","color","chainId","blockExplorer","rpcUrl","global","window","location","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","polygon","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","NETWORK","n","Text","Typography","Address","props","currentTheme","useThemeSwitcher","isAdvancedMode","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","target","href","rel","seed","toLowerCase","scale","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","cursor","onClick","ethers","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","useEffect","usdValue","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","title","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","setItem","Date","now","privateKey","createRandom","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","useBurner","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","modalButtons","cachedProvider","marginLeft","shape","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","icon","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","handleForm","returned","buttonIcon","defaultValue","bordered","height","args","baseType","stateMutability","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","Events","contractName","eventName","startBlock","events","useEventListener","paddingBottom","dataSource","renderItem","item","Item","toString","TokenBalance","blockNumber","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","listAccounts","_faucetAddress","getFaucetAddress","GasGauge","parseInt","Header","Ramp","modalUp","setModalUp","allFaucets","networks","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","right","bottom","checked","isChecked","dark","light","tokenContract","useTokenBalance","img","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","networkLocal","closable","ethereum","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","faucetTx","useGasPrice","faucetHint","_network","Curve","ref","useRef","drawArrow","ctx","x1","y1","x2","y2","dx","dy","norm","Math","sqrt","udx","udy","beginPath","moveTo","lineTo","stroke","canvas","current","textSize","getContext","ethReserve","tokenReserve","k","clearRect","maxX","minX","addingEth","addingToken","max","maxY","minY","plotX","x","plotY","y","strokeStyle","fillStyle","font","lineWidth","first","newEthReserve","arc","PI","fill","fillText","amountGained","round","newTokenReserve","transform","transformOrigin","tokenName","Dex","values","setValues","writeContracts","contractAddress","readContracts","contractBalance","tokenBalance","tokenBalanceFloat","ethBalanceFloat","liquidity","useContractReader","rowForm","newValues","valueInEther","swapEthToTokenResult","allowance","lt","approve","approveTx","swapTx","approveTxResult","swapTxResult","valuePlusExtra","withdrawTxResult","AdvancedModeSwitch","advancedModeChanger","SwapFormRow","imgSrc","asset","imgSymbol","balloonsBalance","ethBalance","step","changeValueFunction","valueChangeHandler","src","SwapTab","liquidityError","setLiquidityError","fromEth","setFromEth","currentEthValue","setCurrentEthValue","currentBalloonsValue","setCurrentBalloonsValue","ethFixed","setEthFixed","updatePriceCalculations","fixedValue","fixedValueInEther","calculatedPrice","estimateEthToToken","estimateEthRequiredForTokens","estimateTokensRequiredForEth","estimateTokenToEth","formattedPrice","swapEthToToken","swapTokenToEth","setEthValue","setBaloonsValue","preventDefault","switchDirection","zeroError","handleSwapButton","PoolFormRow","approvalNeeded","approvalFunction","buttonLabel","executeFunction","PoolTab","liquidityAmount","setLiquidityAmount","addingLiquidity","setAddingLiquidity","addressApproved","setAddressApproved","changeAddLiquidity","depositLiquidity","withdrawLiquidity","approveDeposit","Tabs","page","activeTab","setActiveTab","ifPoolTabActive","ifSwapTabActive","match","useRouteMatch","Home","ExampleUI","purpose","newPurpose","setNewPurpose","border","YourContract","setPurpose","update","status","gasUsed","gas","encodeFunctionData","SyncOutlined","spin","range","defaultChecked","percent","Hints","selectedToken","setSelectedToken","listOfTokens","useTokenList","showSearch","filterOption","option","children","optionFilterProp","token","symbol","highlight","Subgraph","EXAMPLE_GRAPHQL","EXAMPLE_GQL","gql","useQuery","pollInterval","purposeColumns","dataIndex","render","record","sender","d","toISOString","deployWarning","purposes","columns","rowKey","fetcher","graphQLParams","fetch","subgraphUri","headers","then","response","json","docExplorerOpen","query","SimpleUI","initialNetwork","Web3ModalSetup","App","networkOptions","injectedProvider","setInjectedProvider","selectedNetwork","advancedMode","setAdvancedMode","useLocation","process","REACT_APP_PROVIDER","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useUserProviderAndSigner","yourMainnetBalance","deployedContracts","externalContracts","mainnetContracts","useOnBlock","_lastBlockNumber","myMainnetDAIBalance","history","useHistory","Web3Provider","code","reason","faucetAvailable","connection","EthToTokenSwapEvents","TokenToEthSwapEvents","selectedKeys","pathname","exact","path","DEX","DAI","advancedModeStatus","flex","alignItems","lte","align","gutter","prevTheme","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","document","getElementById","module","exports","abi","internalType","anonymous","indexed","constant","outputs","UNI"],"mappings":"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","file":"static/js/main.8bdb7617.chunk.js","sourcesContent":["// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"1481f58b3f794f52ab04fde007a66291 \";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PTJDJQS92DB9BJP6SSU97Z3C91C41DSZ33\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const ALCHEMY_KEY = \"X6ZbuunfiCSmLDfVARGxggzu5KAbwy35\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  polygon: {\n    name: \"polygon\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://polygon-rpc.com/\",\n    blockExplorer: \"https://polygonscan.com/\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.polygon.technology/\",\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"testnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"mainnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n  fantom: {\n    name: \"fantom\",\n    color: \"#1969ff\",\n    chainId: 250,\n    blockExplorer: \"https://ftmscan.com/\",\n    rpcUrl: `https://rpcapi.fantom.network`,\n    gasPrice: 1000000000,\n  },\n  testnetFantom: {\n    name: \"testnetFantom\",\n    color: \"#1969ff\",\n    chainId: 4002,\n    blockExplorer: \"https://testnet.ftmscan.com/\",\n    rpcUrl: `https://rpc.testnet.fantom.network`,\n    gasPrice: 1000000000,\n    faucet: \"https://faucet.fantom.network/\",\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\n\nexport default function Address(props) {\n  const { currentTheme } = useThemeSwitcher();\n  const isAdvancedMode = props.isAdvancedMode;\n  const address = props.value || props.address;\n  const ens = useLookupAddress(props.ensProvider, address);\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  return (\n    <span>\n      {isAdvancedMode && <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>}\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {props.onChange ? (\n          <Text editable={{ onChange: props.onChange }} copyable={ isAdvancedMode && { text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        ) : (\n          <Text copyable={isAdvancedMode && { text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        )}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  const balance = useBalance(props.provider, props.address);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import Fortmatic from \"fortmatic\";\nimport WalletLink from \"walletlink\";\nimport Web3Modal from \"web3modal\";\nimport Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Authereum from \"authereum\";\nimport { INFURA_ID, ALCHEMY_KEY } from \"../constants\";\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3ModalSetup = () =>\n  new Web3Modal({\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n    cacheProvider: true, // optional\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          bridge: \"https://polygon.bridge.walletconnect.org\",\n          infuraId: INFURA_ID,\n          rpc: {\n            1: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n            42: `https://kovan.infura.io/v3/${INFURA_ID}`,\n            100: \"https://dai.poa.network\", // xDai\n          },\n        },\n      },\n      portis: {\n        display: {\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n          name: \"Portis\",\n          description: \"Connect to Portis App\",\n        },\n        package: Portis,\n        options: {\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n        },\n      },\n      fortmatic: {\n        package: Fortmatic, // required\n        options: {\n          key: \"pk_live_5A7C91B2FC585A17\", // required\n        },\n      },\n      // torus: {\n      //   package: Torus,\n      //   options: {\n      //     networkParams: {\n      //       host: \"https://localhost:8545\", // optional\n      //       chainId: 1337, // optional\n      //       networkId: 1337 // optional\n      //     },\n      //     config: {\n      //       buildEnv: \"development\" // optional\n      //     },\n      //   },\n      // },\n      \"custom-walletlink\": {\n        display: {\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n          name: \"Coinbase\",\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n        },\n        package: walletLinkProvider,\n        connector: async (provider, _options) => {\n          await provider.enable();\n          return provider;\n        },\n      },\n      authereum: {\n        package: Authereum, // required\n      },\n    },\n  });\n\nexport default web3ModalSetup;\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\nimport { ethers } from \"ethers\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n            Scan\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\n      value={display}\n      addonAfter={\n        !props.price ? (\n          \"\"\n        ) : (\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              if (mode === \"USD\") {\n                setMode(\"ETH\");\n                setDisplay(currentValue);\n              } else {\n                setMode(\"USD\");\n                if (currentValue) {\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n                  setDisplay(usdValue);\n                } else {\n                  setDisplay(currentValue);\n                }\n              }\n            }}\n          >\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\n          </div>\n        )\n      }\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    useBurner={boolean}\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n    isContract={boolean}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  isAdvancedMode,\n  useBurner,\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isContract,\n}) {\n  const { currentTheme } = useThemeSwitcher();\n\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {web3Modal && web3Modal.cachedProvider ? (\n        <>\n          {address && <Address isAdvancedMode = {isAdvancedMode} address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\n          {isAdvancedMode && <Balance address={address} provider={localProvider} price={price} />}\n          {isAdvancedMode && <Wallet\n            address={address}\n            provider={localProvider}\n            signer={userSigner}\n            ensProvider={mainnetProvider}\n            price={price}\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          />}\n        </>\n      ) : useBurner ? (\n        \"\"\n      ) : isContract ? (\n        <>\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\n          <Balance address={address} provider={localProvider} price={price} />\n        </>\n      ) : (\n        \"\"\n      )}\n      {useBurner && web3Modal && !web3Modal.cachedProvider ? (\n        <>\n          {isAdvancedMode && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\n          {isAdvancedMode && <Balance address={address} provider={localProvider} price={price} />}\n          {isAdvancedMode && <Wallet\n            address={address}\n            provider={localProvider}\n            signer={userSigner}\n            ensProvider={mainnetProvider}\n            price={price}\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          />}\n        </>\n      ) : (\n        <></>\n      )}\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n","import { Button, Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { tryToDisplay } from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport React, { useMemo, useState } from \"react\";\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\nimport Account from \"../Account\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\nimport Address from \"../Address\";\nimport Balance from \"../Balance\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n  contractConfig,\n}) {\n  const contracts = useContractLoader(provider, contractConfig, chainId);\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(() => {\n    const results = contract\n      ? Object.entries(contract.interface.functions).filter(\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\n        )\n      : [];\n    return results;\n  }, [contract, show]);\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\n    const contractFunc =\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\n        ? contract[contractFuncInfo[0]]\n        : contract.connect(signer)[contractFuncInfo[0]];\n\n    if (typeof contractFunc === \"function\") {\n      if (isQueryable(contractFuncInfo[1])) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={contractFuncInfo[1].name}\n            contractFunction={contractFunc}\n            functionInfo={contractFuncInfo[1]}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n            blockExplorer={blockExplorer}\n          />\n        );\n      }\n\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + contractFuncInfo[0]}\n          contractFunction={contractFunc}\n          functionInfo={contractFuncInfo[1]}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div style={{ fontSize: 24 }}>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Address value={address} />\n            </div>\n            <div style={{ float: \"right\", marginRight: 25 }}>\n              <Balance address={address} provider={provider} price={price} />\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { List } from \"antd\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\nimport { Address, TokenBalance } from \"../components\";\n\n/*\n  ~ What it does? ~\n\n  Displays a lists of events\n\n  ~ How can I use? ~\n\n  <Events\n    contracts={readContracts}\n    contractName=\"YourContract\"\n    eventName=\"SetPurpose\"\n    localProvider={localProvider}\n    mainnetProvider={mainnetProvider}\n    startBlock={1}\n  />\n*/\n\nexport default function Events({ contracts, contractName, eventName, localProvider, mainnetProvider, startBlock }) {\n  // 📟 Listen for broadcast events\n  const events = useEventListener(contracts, contractName, eventName, localProvider, startBlock);\n\n  return (\n    <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n      <h2>\n        {eventName} Events\n        <br />\n        {eventName === \"EthToTokenSwap\"\n          ? \" ⟠ -->🎈 Address | Trade | AmountIn | AmountOut\"\n          : eventName === \"TokenToEthSwap\"\n          ? \"🎈-->⟠ Address | Trade | AmountOut | AmountIn\"\n          : eventName === \"LiquidityProvided\"\n          ? \"➕ Address | Liquidity Minted | Eth In | Balloons In\"\n          : eventName === \"LiquidityRemoved\"\n          ? \"➖ Address | Liquidity Withdrawn | ETH out | Balloons Out \"\n          : \"Approval: Owner | Spender | Value \"}\n      </h2>\n      <List\n        bordered\n        dataSource={events}\n        renderItem={item => {\n          return (\n            <List.Item key={item.blockNumber + \"_\" + item.args[0].toString()}>\n              <Address address={item.args[0]} ensProvider={mainnetProvider} fontSize={16} />\n              {item.args[1].toString().indexOf(\"E\") == -1 ? (\n                <TokenBalance balance={item.args[1]} provider={localProvider} />\n              ) : (\n                `${item.args[1].toString()}`\n              )}\n              <TokenBalance balance={item.args[2]} provider={localProvider} />\n              <TokenBalance balance={item.args[3]} provider={localProvider} />\n            </List.Item>\n          );\n        }}\n      />\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\n\n// added display of 0 instead of NaN if gas price is not provided\n\n/*\n  ~ What it does? ~\n\n  Displays gas gauge\n\n  ~ How can I use? ~\n\n  <GasGauge\n    gasPrice={gasPrice}\n  />\n\n  ~ Features ~\n\n  - Provide gasPrice={gasPrice} and get current gas gauge\n*/\n\nexport default function GasGauge(props) {\n  return (\n    <Button\n      onClick={() => {\n        window.open(\"https://ethgasstation.info/\");\n      }}\n      size=\"large\"\n      shape=\"round\"\n    >\n      <span style={{ marginRight: 8 }}>\n        <span role=\"img\" aria-label=\"fuelpump\">\n          ⛽️\n        </span>\n      </span>\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\n    </Button>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header() {\n  return (\n      <PageHeader\n        title=\"SimpleSwap\"\n        // subTitle=\"\"\n        style={{ cursor: \"pointer\" }}\n      />\n    \n  );\n}\n","import { DollarCircleOutlined } from \"@ant-design/icons\";\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\nimport { Button, Divider, Modal } from \"antd\";\nimport React, { useState } from \"react\";\n\n// added display of 0 if price={price} is not provided\n\n/*\n  ~ What it does? ~\n\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\n\n  ~ How can I use? ~\n\n  <Ramp\n    price={price}\n    address={address}\n  />\n\n  ~ Features ~\n\n  - Ramp opens directly in the application, component uses RampInstantSDK\n  - Provide price={price} and current ETH price will be displayed\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\n*/\n\nexport default function Ramp(props) {\n  const [modalUp, setModalUp] = useState(\"down\");\n\n  const type = \"default\";\n\n  const allFaucets = [];\n  for (const n in props.networks) {\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\n      allFaucets.push(\n        <p key={props.networks[n].chainId}>\n          <Button\n            style={{ color: props.networks[n].color }}\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(props.networks[n].faucet);\n            }}\n          >\n            {props.networks[n].name}\n          </Button>\n        </p>,\n      );\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        size=\"large\"\n        shape=\"round\"\n        onClick={() => {\n          setModalUp(\"up\");\n        }}\n      >\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\n      </Button>\n      <Modal\n        title=\"Buy ETH\"\n        visible={modalUp === \"up\"}\n        onCancel={() => {\n          setModalUp(\"down\");\n        }}\n        footer={[\n          <Button\n            key=\"back\"\n            onClick={() => {\n              setModalUp(\"down\");\n            }}\n          >\n            cancel\n          </Button>,\n        ]}\n      >\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-us\">\n                🇺🇸\n              </span>\n            </span>\n            Wyre\n          </Button>\n        </p>\n        <p>\n          {\" \"}\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              new RampInstantSDK({\n                hostAppName: \"scaffold-eth\",\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\n                swapAsset: \"ETH\",\n                userAddress: props.address,\n              })\n                .on(\"*\", event => console.log(event))\n                .show();\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-gb\">\n                🇬🇧\n              </span>\n            </span>\n            Ramp\n          </Button>\n        </p>\n\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\n              🏦\n            </span>\n            Coinbase\n          </Button>\n        </p>\n\n        <Divider />\n\n        <h2>Testnet ETH</h2>\n\n        {allFaucets}\n      </Modal>\n    </div>\n  );\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst createProvider = async url => {\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\n\n  await p.ready;\n\n  return p;\n};\n\nexport default function useStaticJsonRPC(urlArray) {\n  const [provider, setProvider] = useState(null);\n\n  const handleProviders = useCallback(async () => {\n    try {\n      const p = await Promise.race(urlArray.map(createProvider));\n      const _p = await p;\n\n      setProvider(_p);\n    } catch (error) {\n      // todo: show notification error about provider issues\n      console.log(error);\n    }\n  }, [urlArray]);\n\n  useEffect(() => {\n    handleProviders();\n    // eslint-disable-next-line\n  }, [JSON.stringify(urlArray)]);\n\n  return provider;\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\n// @ts-ignore\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = (await contractListPromise).default ?? {};\n  config.externalContracts = (await externalContractsPromise).default ?? {};\n  return config;\n};\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n  return undefined;\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n  const [tokens, setTokens] = useState();\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI, _tokenListUri, activeChainId]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n    // eslint-disable-next-line\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { useTokenBalance } from \"eth-hooks/erc/erc-20/useTokenBalance\";\nimport React, { useState } from \"react\";\n\nimport { utils } from \"ethers\";\n\nexport default function TokenBalance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  const tokenContract = props.contracts && props.contracts[props.name];\n  \n  const balance = useTokenBalance(tokenContract, props.address, 1777);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  if (props.dollarMultiplier && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * props.dollarMultiplier).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {props.img} {displayBalance}\n    </span>\n  );\n}\n","import { utils, ethers } from \"ethers\";\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/*\nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n*/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\nimport { NETWORK } from \"../constants\";\n\nfunction NetworkDisplay({\n  NETWORKCHECK,\n  localChainId,\n  selectedChainId,\n  targetNetwork,\n  USE_NETWORK_SELECTOR,\n  logoutOfWeb3Modal,\n}) {\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  console.log({ networkDisplay });\n\n  return networkDisplay;\n}\n\nexport default NetworkDisplay;\n","import React, { useState } from \"react\";\nimport { useBalance, useGasPrice } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport { Button } from \"antd\";\n\nimport { Transactor } from \"../helpers\";\n\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\n  const [faucetClicked, setFaucetClicked] = useState(false);\n\n  // fetch local balance\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // get gas Price from network\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  let faucetHint = \"\";\n\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16, display: \"inline-flex\" }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return faucetHint;\n}\n\nexport default FaucetHint;\n","import React, { useRef, useEffect } from \"react\";\n\nexport default function Curve(props) {\n  let ref = useRef();\n\n  const drawArrow = (ctx, x1, y1, x2, y2) => {\n    let [dx, dy] = [x1 - x2, y1 - y2];\n    let norm = Math.sqrt(dx * dx + dy * dy);\n    let [udx, udy] = [dx / norm, dy / norm];\n    const size = norm / 7;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.moveTo(x2, y2);\n    ctx.lineTo(x2 + udx * size - udy * size, y2 + udx * size + udy * size);\n    ctx.moveTo(x2, y2);\n    ctx.lineTo(x2 + udx * size + udy * size, y2 - udx * size + udy * size);\n    ctx.stroke();\n  };\n\n  useEffect(() => {\n    let canvas = ref.current;\n\n    const textSize = 12;\n\n    const width = canvas.width;\n    const height = canvas.height;\n\n    if (canvas.getContext && props.ethReserve && props.tokenReserve) {\n      const k = props.ethReserve * props.tokenReserve;\n\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, width, height);\n\n      let maxX = k / (props.ethReserve / 4);\n      let minX = 0;\n\n      if (props.addingEth || props.addingToken) {\n        maxX = k / (props.ethReserve * 0.4);\n        //maxX = k/(props.ethReserve*0.8)\n        minX = k / Math.max(0, 500 - props.ethReserve);\n      }\n\n      const maxY = (maxX * height) / width;\n      const minY = (minX * height) / width;\n\n      const plotX = x => {\n        return ((x - minX) / (maxX - minX)) * width;\n      };\n\n      const plotY = y => {\n        return height - ((y - minY) / (maxY - minY)) * height;\n      };\n      ctx.strokeStyle = \"#000000\";\n      ctx.fillStyle = \"#000000\";\n      ctx.font = textSize + \"px Arial\";\n      // +Y axis\n      ctx.beginPath();\n      ctx.moveTo(plotX(minX), plotY(0));\n      ctx.lineTo(plotX(minX), plotY(maxY));\n      ctx.stroke();\n      // +X axis\n      ctx.beginPath();\n      ctx.moveTo(plotX(0), plotY(minY));\n      ctx.lineTo(plotX(maxX), plotY(minY));\n      ctx.stroke();\n\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      let first = true;\n      for (var x = minX; x <= maxX; x += maxX / width) {\n        /////\n        var y = k / x;\n        /////\n        if (first) {\n          ctx.moveTo(plotX(x), plotY(y));\n          first = false;\n        } else {\n          ctx.lineTo(plotX(x), plotY(y));\n        }\n      }\n      ctx.stroke();\n\n      ctx.lineWidth = 1;\n\n      if (props.addingEth) {\n        let newEthReserve = props.ethReserve + parseFloat(props.addingEth);\n\n        ctx.fillStyle = \"#bbbbbb\";\n        ctx.beginPath();\n        ctx.arc(plotX(newEthReserve), plotY(k / newEthReserve), 5, 0, 2 * Math.PI);\n        ctx.fill();\n\n        ctx.strokeStyle = \"#009900\";\n        drawArrow(\n          ctx,\n          plotX(props.ethReserve),\n          plotY(props.tokenReserve),\n          plotX(newEthReserve),\n          plotY(props.tokenReserve),\n        );\n\n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(\n          \"\" + props.addingEth + \" ETH input\",\n          plotX(props.ethReserve) + textSize,\n          plotY(props.tokenReserve) - textSize,\n        );\n\n        ctx.strokeStyle = \"#990000\";\n        drawArrow(ctx, plotX(newEthReserve), plotY(props.tokenReserve), plotX(newEthReserve), plotY(k / newEthReserve));\n\n        let amountGained = Math.round((10000 * (props.addingEth * props.tokenReserve)) / newEthReserve) / 10000;\n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(\n          \"\" + amountGained + \" 🎈 output (-0.3% fee)\",\n          plotX(newEthReserve) + textSize,\n          plotY(k / newEthReserve),\n        );\n      } else if (props.addingToken) {\n        let newTokenReserve = props.tokenReserve + parseFloat(props.addingToken);\n\n        ctx.fillStyle = \"#bbbbbb\";\n        ctx.beginPath();\n        ctx.arc(plotX(k / newTokenReserve), plotY(newTokenReserve), 5, 0, 2 * Math.PI);\n        ctx.fill();\n\n        //console.log(\"newTokenReserve\",newTokenReserve)\n        ctx.strokeStyle = \"#990000\";\n        drawArrow(\n          ctx,\n          plotX(props.ethReserve),\n          plotY(props.tokenReserve),\n          plotX(props.ethReserve),\n          plotY(newTokenReserve),\n        );\n\n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(\n          \"\" + props.addingToken + \" 🎈 input\",\n          plotX(props.ethReserve) + textSize,\n          plotY(props.tokenReserve),\n        );\n\n        ctx.strokeStyle = \"#009900\";\n        drawArrow(\n          ctx,\n          plotX(props.ethReserve),\n          plotY(newTokenReserve),\n          plotX(k / newTokenReserve),\n          plotY(newTokenReserve),\n        );\n\n        let amountGained = Math.round((10000 * (props.addingToken * props.ethReserve)) / newTokenReserve) / 10000;\n        //console.log(\"amountGained\",amountGained)\n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(\n          \"\" + amountGained + \" ETH output (-0.3% fee)\",\n          plotX(k / newTokenReserve) + textSize,\n          plotY(newTokenReserve) - textSize,\n        );\n      }\n\n      ctx.fillStyle = \"#0000FF\";\n      ctx.beginPath();\n      ctx.arc(plotX(props.ethReserve), plotY(props.tokenReserve), 5, 0, 2 * Math.PI);\n      ctx.fill();\n    }\n  }, [props]);\n\n  return (\n    <div style={{ position: \"relative\", width: props.width, height: props.height }}>\n      <canvas style={{ position: \"absolute\", left: 0, top: 0 }} ref={ref} width={props.width} height={props.height} />\n      <div style={{ position: \"absolute\", left: \"20%\", bottom: -20 }}>-- ETH Reserve --></div>\n      <div\n        style={{ position: \"absolute\", left: -20, bottom: \"20%\", transform: \"rotate(-90deg)\", transformOrigin: \"0 0\" }}\n      >\n        -- Token Reserve -->\n      </div>\n    </div>\n  );\n}\n","import { Card, Col, Divider, Input, Row } from \"antd\";\nimport { useBalance, useContractReader, useBlockNumber } from \"eth-hooks\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\nimport { useTokenBalance } from \"eth-hooks/erc/erc-20/useTokenBalance\";\nimport { ethers } from \"ethers\";\nimport React, { useState } from \"react\";\nimport Address from \"./Address\";\nimport Contract from \"./Contract\";\nimport Curve from \"./Curve\";\nimport TokenBalance from \"./TokenBalance\";\nimport Blockies from \"react-blockies\";\n\nconst contractName = \"DEX\";\nconst tokenName = \"Balloons\";\n\nexport default function Dex(props) {\n  let display = [];\n\n  const [form, setForm] = useState({});\n  const [values, setValues] = useState({});\n  const tx = props.tx;\n\n  const writeContracts = props.writeContracts;\n\n  const contractAddress = props.readContracts[contractName].address;\n  const tokenAddress = props.readContracts[tokenName].address;\n  const contractBalance = useBalance(props.localProvider, contractAddress);\n\n  const tokenBalance = useTokenBalance(props.readContracts[tokenName], contractAddress, props.localProvider);\n  const tokenBalanceFloat = parseFloat(ethers.utils.formatEther(tokenBalance));\n  const ethBalanceFloat = parseFloat(ethers.utils.formatEther(contractBalance));\n  const liquidity = useContractReader(props.readContracts, contractName, \"totalLiquidity\");\n\n  const rowForm = (title, icon, onClick) => {\n    return (\n      <Row>\n        <Col span={8} style={{ textAlign: \"right\", opacity: 0.333, paddingRight: 6, fontSize: 24 }}>\n          {title}\n        </Col>\n        <Col span={16}>\n          <div style={{ cursor: \"pointer\", margin: 2 }}>\n            <Input\n              onChange={e => {\n                let newValues = { ...values };\n                newValues[title] = e.target.value;\n                setValues(newValues);\n              }}\n              value={values[title]}\n              addonAfter={\n                <div\n                  type=\"default\"\n                  onClick={() => {\n                    onClick(values[title]);\n                    let newValues = { ...values };\n                    newValues[title] = \"\";\n                    setValues(newValues);\n                  }}\n                >\n                  {icon}\n                </div>\n              }\n            />\n          </div>\n        </Col>\n      </Row>\n    );\n  };\n\n  if (props.readContracts && props.readContracts[contractName]) {\n    display.push(\n      <div>\n        {rowForm(\"ethToToken\", \"💸\", async value => {\n          let valueInEther = ethers.utils.parseEther(\"\" + value);\n          let swapEthToTokenResult = await tx(writeContracts[contractName][\"ethToToken\"]({ value: valueInEther }));\n          console.log(\"swapEthToTokenResult:\", swapEthToTokenResult);\n        })}\n\n        {rowForm(\"tokenToEth\", \"🔏\", async value => {\n          let valueInEther = ethers.utils.parseEther(\"\" + value);\n          console.log(\"valueInEther\", valueInEther);\n          let allowance = await props.readContracts[tokenName].allowance(\n            props.address,\n            props.readContracts[contractName].address,\n          );\n          console.log(\"allowance\", allowance);\n\n          let approveTx;\n          if (allowance.lt(valueInEther)) {\n            approveTx = await tx(\n              writeContracts[tokenName].approve(props.readContracts[contractName].address, valueInEther, {\n                gasLimit: 200000,\n              }),\n            );\n          }\n\n          let swapTx = tx(writeContracts[contractName][\"tokenToEth\"](valueInEther, { gasLimit: 200000 }));\n          if (approveTx) {\n            console.log(\"waiting on approve to finish...\");\n            let approveTxResult = await approveTx;\n            console.log(\"approveTxResult:\", approveTxResult);\n          }\n          let swapTxResult = await swapTx;\n          console.log(\"swapTxResult:\", swapTxResult);\n        })}\n\n        <Divider> Liquidity ({liquidity ? ethers.utils.formatEther(liquidity) : \"none\"}):</Divider>\n\n        {rowForm(\"deposit\", \"📥\", async value => {\n          let valueInEther = ethers.utils.parseEther(\"\" + value);\n          let valuePlusExtra = ethers.utils.parseEther(\"\" + value * 1.03);\n          console.log(\"valuePlusExtra\", valuePlusExtra);\n          let allowance = await props.readContracts[tokenName].allowance(\n            props.address,\n            props.readContracts[contractName].address,\n          );\n          console.log(\"allowance\", allowance);\n          if (allowance.lt(valuePlusExtra)) {\n            await tx(\n              writeContracts[tokenName].approve(props.readContracts[contractName].address, valuePlusExtra, {\n                gasLimit: 200000,\n              }),\n            );\n          }\n          await tx(writeContracts[contractName][\"deposit\"]({ value: valueInEther, gasLimit: 200000 }));\n        })}\n\n        {rowForm(\"withdraw\", \"📤\", async value => {\n          let valueInEther = ethers.utils.parseEther(\"\" + value);\n          let withdrawTxResult = await tx(writeContracts[contractName][\"withdraw\"](valueInEther));\n          console.log(\"withdrawTxResult:\", withdrawTxResult);\n        })}\n      </div>,\n    );\n  }\n\n  return (\n    <Row span={24}>\n      <Col span={12}>\n        <Card\n          title={\n            <div>\n              <Address value={contractAddress} />\n              <div style={{ float: \"right\", fontSize: 24 }}>\n                {parseFloat(ethers.utils.formatEther(contractBalance)).toFixed(4)} ⚖️\n                <TokenBalance name={tokenName} img={\"🎈\"} address={contractAddress} contracts={props.readContracts} />\n              </div>\n            </div>\n          }\n          size=\"large\"\n          loading={false}\n        >\n          {display}\n        </Card>\n        <Row span={12}>\n          <Contract\n            name=\"Balloons\"\n            signer={props.signer}\n            provider={props.localProvider}\n            show={[\"balanceOf\", \"approve\"]}\n            address={props.address}\n            blockExplorer={props.blockExplorer}\n            contractConfig={props.contractConfig}\n          />\n        </Row>\n      </Col>\n      <Col span={12}>\n        <div style={{ padding: 20 }}>\n          <Curve\n            addingEth={values && values[\"ethToToken\"] ? values[\"ethToToken\"] : 0}\n            addingToken={values && values[\"tokenToEth\"] ? values[\"tokenToEth\"] : 0}\n            ethReserve={ethBalanceFloat}\n            tokenReserve={tokenBalanceFloat}\n            width={500}\n            height={500}\n          />\n        </div>\n      </Col>\n    </Row>\n  );\n}\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function AdvancedModeSwitch (props) {\n    const isAdvancedMode = props.isAdvancedMode;\n    const advancedModeChanger = props.advancedModeChanger;\n\n    \nconst toggleAdvancedMode = isChecked => {\n    advancedModeChanger(isChecked);\n    \n  };\n\n\n  return (\n      <div className=\"advancedModeSwitch\">\n          <h3>Advanced mode</h3>\n          <Switch checked={isAdvancedMode} onChange={toggleAdvancedMode} />\n      </div>\n\n  );\n}\n","import { useTokenBalance } from \"eth-hooks/erc/erc-20/useTokenBalance\";\nimport { utils } from \"ethers\";\n\nexport default function SwapFormRow(props) {\n  const valueChangeHandler = e => {\n    props.changeValueFunction(e.target.value);\n  };\n\n  const imgSrc = props.asset == \"ether\" ? \"ethlogo.png\" : \"ballogo.png\";\n  const imgSymbol = props.asset == \"ether\" ? \"ETH\" : \"BAL\";\n\n  const tokenContract = props.contracts && props.contracts[\"Balloons\"];\n  const balloonsBalance = useTokenBalance(tokenContract, props.address, 1777);\n  const ethBalance = props.yourLocalBalance;\n\n  const balance = props.asset == \"ether\" ? ethBalance : balloonsBalance;\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  const etherBalance = utils.formatEther(balance);\n  parseFloat(etherBalance).toFixed(2);\n  floatBalance = parseFloat(etherBalance);\n  const displayBalance = floatBalance.toFixed(2);\n\n  return (\n    <div className=\"form-row\">\n      <input\n        type=\"number\"\n        step=\"0.01\"\n        placeholder=\"0.0\"\n        className=\"swap-row-input\"\n        value={props.value}\n        onChange={e => valueChangeHandler(e)}\n      ></input>\n      <div className=\"swap-row-right-group\">\n        \n        <div className=\"swap-row-dropdown\">\n          <div className=\"currency-img\">\n            <img src={`../../images/${imgSrc}`} height=\"20px\" />\n          </div>\n          <div className=\"currency-symbol\">{imgSymbol}</div>\n        </div>\n        <div className=\"swap-row-balance\">\n          <p>Balance: {displayBalance}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { ethers } from \"ethers\";\nimport React, { useState, useEffect } from \"react\";\nimport SwapFormRow from \"./SwapFormRow\";\n\nconst contractName = \"DEX\";\nconst tokenName = \"Balloons\";\n\nexport default function SwapTab(props) {\n\n  const [liquidityError, setLiquidityError] = useState(false);\n\n  const tx = props.tx;\n\n  const writeContracts = props.writeContracts;\n\n  const [fromEth, setFromEth] = useState(true);\n  const [currentEthValue, setCurrentEthValue] = useState(\"\");\n  const [currentBalloonsValue, setCurrentBalloonsValue] = useState(\"\");\n  const [ethFixed, setEthFixed] = useState(true);\n\n  useEffect(() => {\n    //runs when swap direction changes or text fields are changed to calculate prices\n\n    updatePriceCalculations();\n  }, [fromEth, ethFixed, currentEthValue, currentBalloonsValue]);\n\n  const updatePriceCalculations = async () => {\n    //calculate the floating price as required based on fromEth and ethFixed\n\n    let fixedValue = ethFixed ? currentEthValue : currentBalloonsValue;\n\n    //handle blank input box\n    if (fixedValue == \"\") {\n      setCurrentBalloonsValue(\"\");\n      setCurrentEthValue(\"\");\n      console.log(\"not calculating price with blank input\");\n    } else {\n      let fixedValueInEther = ethers.utils.parseEther(\"\" + fixedValue);\n      let calculatedPrice = 0;\n      if (fromEth) {\n        if (ethFixed) {\n          calculatedPrice = await props.readContracts[contractName].estimateEthToToken(fixedValueInEther);\n        } else {\n          try {\n            calculatedPrice = await props.readContracts[contractName].estimateEthRequiredForTokens(fixedValueInEther);\n            setLiquidityError(false);\n          } catch (e) {\n            console.log(e);\n            console.log(\"not enough Ballons liquidity\");\n\n            setLiquidityError(true);\n          }\n        }\n      } else {\n        if (ethFixed) {\n          try {\n            calculatedPrice = await props.readContracts[contractName].estimateTokensRequiredForEth(fixedValueInEther);\n            setLiquidityError(false);\n          } catch (e) {\n            console.log(e);\n            console.log(\"not enough Eth liquidity\");\n            setLiquidityError(true);\n          }\n        } else {\n          calculatedPrice = await props.readContracts[contractName].estimateTokenToEth(fixedValueInEther);\n        }\n      }\n      let formattedPrice = (Math.round(ethers.utils.formatEther(calculatedPrice) * 100) / 100).toFixed(2);\n      //the value should probably only be rounded in the UI rather than rounding the actual value\n      ethFixed == true ? setCurrentBalloonsValue(formattedPrice) : setCurrentEthValue(formattedPrice);\n    }\n  };\n\n  const switchDirection = e => {\n    e.preventDefault();\n    setFromEth(!fromEth);\n    setLiquidityError(false);\n  };\n  const handleSwapButton = e => {\n    e.preventDefault();\n    let zeroError = false;\n    if (currentEthValue == 0 || currentEthValue == \"\") {\n      zeroError = true;\n    }\n    if (!liquidityError & !zeroError) {\n      fromEth == true ? swapEthToToken(currentEthValue) : swapTokenToEth(currentBalloonsValue);\n    }\n  };\n\n  const swapEthToToken = async value => {\n    console.log(\"Swapping...\");\n    let valueInEther = ethers.utils.parseEther(\"\" + value);\n    let swapEthToTokenResult = await tx(writeContracts[contractName][\"ethToToken\"]({ value: valueInEther }));\n    console.log(\"swapEthToTokenResult:\", swapEthToTokenResult);\n  };\n\n  const swapTokenToEth = async value => {\n    let valueInEther = ethers.utils.parseEther(\"\" + value);\n    console.log(\"valueInEther\", valueInEther);\n    let allowance = await props.readContracts[tokenName].allowance(\n      props.address,\n      props.readContracts[contractName].address,\n    );\n    console.log(\"allowance\", allowance);\n\n    let approveTx;\n    if (allowance.lt(valueInEther)) {\n      approveTx = await tx(\n        writeContracts[tokenName].approve(props.readContracts[contractName].address, valueInEther, {\n          gasLimit: 200000,\n        }),\n      );\n    }\n\n    let swapTx = tx(writeContracts[contractName][\"tokenToEth\"](valueInEther, { gasLimit: 200000 }));\n    if (approveTx) {\n      console.log(\"waiting on approve to finish...\");\n      let approveTxResult = await approveTx;\n      console.log(\"approveTxResult:\", approveTxResult);\n    }\n    let swapTxResult = await swapTx;\n    console.log(\"swapTxResult:\", swapTxResult);\n  };\n\n  const theme = window.localStorage.getItem(\"theme\");\n\n  //handle change of text in ETH input\n  const setEthValue = value => {\n    setCurrentEthValue(value);\n    setEthFixed(true);\n  };\n\n  //handle change of text in ballons input\n  const setBaloonsValue = value => {\n    setCurrentBalloonsValue(value);\n    setEthFixed(false);\n  };\n\n  return (\n    <div className=\"simple-ui-card\">\n      \n      <div className=\"form-group\">\n        <SwapFormRow\n        contracts={props.readContracts}\n        address={props.address}\n          asset={fromEth ? \"ether\" : \"balloons\"}\n          changeValueFunction={fromEth ? setEthValue : setBaloonsValue}\n          value={fromEth ? currentEthValue : currentBalloonsValue}\n          yourLocalBalance={props.yourLocalBalance}\n        />\n\n        <button onClick={e => switchDirection(e)} id=\"swap-direction-button\">\n          ⬇\n        </button>\n\n        <SwapFormRow\n        contracts={props.readContracts}\n        address={props.address}\n          asset={fromEth ? \"balloons\" : \"ether\"}\n          changeValueFunction={fromEth ? setBaloonsValue : setEthValue}\n          value={fromEth ? currentBalloonsValue : currentEthValue}\n          yourLocalBalance={props.yourLocalBalance}\n        />\n        <button\n          onClick={e => handleSwapButton(e)}\n          id=\"execute-swap-button\"\n          className={liquidityError ? \"liquidity-error-btn\" : \"execute-swap-btn\" }\n          // style={{ background: `${liquidityError ? \"red\" : '#252149' }` }}\n        >\n          {liquidityError ? \"Not enough liquidity\" : \"Swap\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport {Button} from \"antd\";\n\n\nexport default function PoolFormRow(props) {\n  const valueChangeHandler = e => {\n    props.changeValueFunction(e.target.value);\n  };\n\n  const approvalHandler = () => {\n    props.approvalFunction(props.value);\n   \n  };\n  const executeHandler = () => {\n    props.executeFunction(props.value);\n  };\n\n\n  return (\n    <div className=\"form-row\">\n      <input\n        type=\"number\"\n        step=\"0.01\"\n        placeholder=\"0.0\"\n        className=\"pool-row-input\"\n        value= {props.value} \n        onChange={e => valueChangeHandler(e)}\n      ></input>\n      \n     <div>\n      {props.approvalNeeded ? <input type=\"button\" className=\"btn-approve\" value=\"Approve\" onClick={approvalHandler}/>: <input type=\"button\" className=\"btn-pool-execute\" disabled={props.value == 0 || props.value == \"\"} value={props.buttonLabel} onClick={executeHandler}/>}\n      </div>\n    </div>\n  );\n}\n","import { ethers } from \"ethers\";\nimport React, { useState, useEffect } from \"react\";\nimport PoolFormRow from \"./PoolFormRow\";\n\nconst contractName = \"DEX\";\nconst tokenName = \"Balloons\";\n\nexport default function PoolTab(props) {\n\n  const tx = props.tx;\n  const writeContracts = props.writeContracts;\n\n\n  const [liquidityAmount, setLiquidityAmount] = useState(\"\");\n  const [addingLiquidity, setAddingLiquidity] = useState(true);\n  const [addressApproved, setAddressApproved] = useState(true);\n\n  \n\n  const changeAddLiquidity = async value => {\n\n    let valuePlusExtra = ethers.utils.parseEther(\"\" + value * 1.03);\n\n  let allowance = await props.readContracts[tokenName].allowance(\n   props.address,\n       props.readContracts[contractName].address,\n    );\n    setLiquidityAmount(value);\n    setAddingLiquidity(true);\n    if (allowance.lt(valuePlusExtra)) {\n      setAddressApproved(false);\n    } else {\n      setAddressApproved(true);\n    }\n  }\n\n  const changeWithdrawLiquidity = value => {\n      setLiquidityAmount(value);\n      setAddingLiquidity(false);\n   \n      }\n\n  const depositLiquidity = async (value) => {\n   console.log(`Depositing ${liquidityAmount} of liquidity`)\n\n     let valueInEther = ethers.utils.parseEther(\"\" + value);\n \n    await tx(writeContracts[contractName][\"deposit\"]({ value: valueInEther, gasLimit: 200000 }));\n    setLiquidityAmount(\"\");\n    }\n\n \n  \n  const withdrawLiquidity = async (value) => {\n     console.log(`Withdrawing ${liquidityAmount} of liquidity`)\n\n  \n    let valueInEther = ethers.utils.parseEther(\"\" + value);\n     let withdrawTxResult = await tx(writeContracts[contractName][\"withdraw\"](valueInEther));\n     console.log(\"withdrawTxResult:\", withdrawTxResult);\n     setLiquidityAmount(\"\");\n\n  }\n  const approveDeposit = async (value) => {\n\n\n    \n    console.log(`Approving ${liquidityAmount} to be spent`)\n\n    let valuePlusExtra = ethers.utils.parseEther(\"\" + value * 1.03);\n  \n \n   \n     await tx(\n        writeContracts[tokenName].approve(props.readContracts[contractName].address, valuePlusExtra, {\n        gasLimit: 200000,\n        }),\n     );\n     \n\n    setAddressApproved(true);\n  }\n\n  return (\n    <div className=\"simple-ui-card\">\n      \n      <div className=\"form-group\">\n        <div className=\"form-heading\"> Add Liquidity</div>\n        <PoolFormRow\n          changeValueFunction={changeAddLiquidity}\n          value={addingLiquidity == true ? liquidityAmount : \"\"}\n          approvalNeeded={!addressApproved}\n          executeFunction={depositLiquidity}\n          approvalFunction={approveDeposit}\n          buttonLabel={\"Deposit\"}\n        />\n       \n        <div className=\"form-heading\"> Withdraw Liquidity</div>\n\n        <PoolFormRow\n          changeValueFunction={changeWithdrawLiquidity}\n          value={addingLiquidity == false ? liquidityAmount : \"\"}\n          approvalNeeded={false}\n          executeFunction={withdrawLiquidity}\n          buttonLabel={\"Withdraw\"}\n        />\n\n      </div>\n    </div>\n  );\n};\n\n","import React, { useState, useEffect } from \"react\";\nimport SwapTab from \"./SwapTab\";\nimport PoolTab from \"./PoolTab\";\nimport { Button, Col, Menu, Row, List } from \"antd\";\nimport { Redirect, Link, Route, Switch, useLocation, useHistory, useRouteMatch } from \"react-router-dom\";\n\nconst Tabs = props => {\n  const page = props.page;\n  const tx = props.tx;\n  const writeContracts = props.writeContracts;\n  const localProvider = props.localProvider;\n  const mainnetProvider = props.mainnetProvider;\n  const blockExplorer = props.blockExplorer;\n  const address = props.address;\n  const readContracts = props.readContracts;\n  const contractConfig = props.contractConfig;\n  const userSigner = props.signer;\n  const price = props.price;\n  const yourLocalBalance = props.yourLocalBalance;\n\n  console.log(`page variable = ${page}`);\n  const [activeTab, setActiveTab] = useState(\"page\");\n  console.log(`active tab = ${activeTab}`);\n\n\n  const ifPoolTabActive = activeTab === \"pool\" ? true : false;\n  const ifSwapTabActive = activeTab === \"swap\" ? true : false;\n\n  //when the route changes, update the active tab state variable to ensure that the correct tab is highlighted\n  let match = useRouteMatch(\"/:page\");\n  useEffect(() => {\n    //runs when path changes\n    console.log(\"my matching function went at least\");\n\n    if (match == null) {\n      // handle /app/ case\n      setActiveTab(\"swap\");\n    } else {\n      setActiveTab(match.params.page);\n    }\n  }, [match]);\n\n  //  Functions to handle Tab Switching\n  const handleSwapTab = () => {\n    // update the state to tab1\n    setActiveTab(\"swap\");\n  };\n  const handlePoolTab = () => {\n    // update the state to tab2\n    setActiveTab(\"pool\");\n  };\n\n\n  return (\n    <div className=\"tabs\">\n      <div className=\"tabNav\">\n        <Link to=\"/swap\">\n          <span onClick={handleSwapTab}>\n            <div className={`tabNavItem ${ifSwapTabActive ? \"activeTab\" : \"\"}`}>\n              <p>Swap</p>\n            </div>\n          </span>\n        </Link>\n\n        <Link to=\"/pool\">\n          <span onClick={handlePoolTab}>\n            <div className={`tabNavItem ${ifPoolTabActive ? \"activeTab\" : \"\"}`}>\n              <p>Pool</p>\n            </div>\n          </span>\n        </Link>\n      </div>\n\n      {ifSwapTabActive ? (\n        <SwapTab\n          tx={tx}\n          writeContracts={writeContracts}\n          localProvider={localProvider}\n          mainnetProvider={mainnetProvider}\n          blockExplorer={blockExplorer}\n          address={address} //this is causing issues\n          readContracts={readContracts} //this is causing issues\n          contractConfig={contractConfig}\n          signer={userSigner}\n          price={price}\n          yourLocalBalance={yourLocalBalance}\n        />\n      ) : (\n        <PoolTab\n          tx={tx}\n          writeContracts={writeContracts}\n          localProvider={localProvider}\n          mainnetProvider={mainnetProvider}\n          blockExplorer={blockExplorer}\n          address={address} //this is causing issues\n          readContracts={readContracts} //this is causing issues\n          contractConfig={contractConfig}\n          signer={userSigner}\n          price={price}\n        />\n      )}\n\n      {/* <Switch>\n        <Route exact path=\"/app\">\n          <Redirect to=\"/app/swap\" />\n        </Route>\n        <Route path=\"/app/swap\">\n          <SwapTab\n            tx={tx}\n            writeContracts={writeContracts}\n            localProvider={localProvider}\n            mainnetProvider={mainnetProvider}\n            blockExplorer={blockExplorer}\n            address={address} //this is causing issues\n            readContracts={readContracts} //this is causing issues\n            contractConfig={contractConfig}\n            signer={userSigner}\n            price={price}\n            yourLocalBalance={yourLocalBalance}\n          />\n        </Route>\n        <Route path=\"/app/pool\">\n          <PoolTab\n            tx={tx}\n            writeContracts={writeContracts}\n            localProvider={localProvider}\n            mainnetProvider={mainnetProvider}\n            blockExplorer={blockExplorer}\n            address={address} //this is causing issues\n            readContracts={readContracts} //this is causing issues\n            contractConfig={contractConfig}\n            signer={userSigner}\n            price={price}\n          />\n        </Route>\n      </Switch> */}\n    </div>\n  );\n};\nexport default Tabs;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useContractReader } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\n\n/**\n * web3 props can be passed from '../App.jsx' into your local view component for use\n * @param {*} yourLocalBalance balance on current network\n * @param {*} readContracts contracts from current chain already pre-loaded using ethers contract module. More here https://docs.ethers.io/v5/api/contract/contract/\n * @returns react component\n */\nfunction Home({ yourLocalBalance, readContracts }) {\n  // you can also use hooks locally in your component of choice\n  // in this case, let's keep track of 'purpose' variable from our contract\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        This Is Your App Home. You can start editing it in{\" \"}\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/views/Home.jsx\n        </span>\n      </div>\n      {!purpose ? (\n        <div style={{ margin: 32 }}>\n          <span style={{ marginRight: 8 }}>👷‍♀️</span>\n          You haven't deployed your contract yet, run\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn chain\n          </span>{\" \"}\n          and{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn deploy\n          </span>{\" \"}\n          to deploy your first contract!\n        </div>\n      ) : (\n        <div style={{ margin: 32 }}>\n          <span style={{ marginRight: 8 }}>🤓</span>\n          The \"purpose\" variable from your contract is{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            {purpose}\n          </span>\n        </div>\n      )}\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤖</span>\n        An example prop of your balance{\" \"}\n        <span style={{ fontWeight: \"bold\", color: \"green\" }}>({ethers.utils.formatEther(yourLocalBalance)})</span> was\n        passed into the\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          Home.jsx\n        </span>{\" \"}\n        component from\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          App.jsx\n        </span>\n      </div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>💭</span>\n        Check out the <Link to=\"/hints\">\"Hints\"</Link> tab for more tips.\n      </div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛠</span>\n        Tinker with your smart contract using the <Link to=\"/debug\">\"Debug Contract\"</Link> tab.\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import { SyncOutlined } from \"@ant-design/icons\";\nimport { utils } from \"ethers\";\nimport { Button, Card, DatePicker, Divider, Input, Progress, Slider, Spin, Switch } from \"antd\";\nimport React, { useState } from \"react\";\nimport { Address, Balance, Events } from \"../components\";\n\nexport default function ExampleUI({\n  purpose,\n  address,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  return (\n    <div>\n      {/*\n        ⚙️ Here is an example UI that displays and sets the purpose in your smart contract:\n      */}\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n        <h2>Example UI:</h2>\n        <h4>purpose: {purpose}</h4>\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            style={{ marginTop: 8 }}\n            onClick={async () => {\n              /* look how you call setPurpose on your contract: */\n              /* notice how you pass a call back for tx updates too */\n              const result = tx(writeContracts.YourContract.setPurpose(newPurpose), update => {\n                console.log(\"📡 Transaction Update:\", update);\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                  console.log(\n                    \" ⛽️ \" +\n                      update.gasUsed +\n                      \"/\" +\n                      (update.gasLimit || update.gas) +\n                      \" @ \" +\n                      parseFloat(update.gasPrice) / 1000000000 +\n                      \" gwei\",\n                  );\n                }\n              });\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\n              console.log(await result);\n            }}\n          >\n            Set Purpose!\n          </Button>\n        </div>\n        <Divider />\n        Your Address:\n        <Address address={address} ensProvider={mainnetProvider} fontSize={16} />\n        <Divider />\n        ENS Address Example:\n        <Address\n          address=\"0x34aA3F359A9D614239015126635CE7732c18fDF3\" /* this will show as austingriffith.eth */\n          ensProvider={mainnetProvider}\n          fontSize={16}\n        />\n        <Divider />\n        {/* use utils.formatEther to display a BigNumber: */}\n        <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\n        <div>OR</div>\n        <Balance address={address} provider={localProvider} price={price} />\n        <Divider />\n        <div>🐳 Example Whale Balance:</div>\n        <Balance balance={utils.parseEther(\"1000\")} provider={localProvider} price={price} />\n        <Divider />\n        {/* use utils.formatEther to display a BigNumber: */}\n        <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\n        <Divider />\n        Your Contract Address:\n        <Address\n          address={readContracts && readContracts.YourContract ? readContracts.YourContract.address : null}\n          ensProvider={mainnetProvider}\n          fontSize={16}\n        />\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* look how you call setPurpose on your contract: */\n              tx(writeContracts.YourContract.setPurpose(\"🍻 Cheers\"));\n            }}\n          >\n            Set Purpose to &quot;🍻 Cheers&quot;\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /*\n              you can also just craft a transaction and send it to the tx() transactor\n              here we are sending value straight to the contract's address:\n            */\n              tx({\n                to: writeContracts.YourContract.address,\n                value: utils.parseEther(\"0.001\"),\n              });\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\n            }}\n          >\n            Send Value\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* look how we call setPurpose AND send some value along */\n              tx(\n                writeContracts.YourContract.setPurpose(\"💵 Paying for this one!\", {\n                  value: utils.parseEther(\"0.001\"),\n                }),\n              );\n              /* this will fail until you make the setPurpose function payable */\n            }}\n          >\n            Set Purpose With Value\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* you can also just craft a transaction and send it to the tx() transactor */\n              tx({\n                to: writeContracts.YourContract.address,\n                value: utils.parseEther(\"0.001\"),\n                data: writeContracts.YourContract.interface.encodeFunctionData(\"setPurpose(string)\", [\n                  \"🤓 Whoa so 1337!\",\n                ]),\n              });\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\n            }}\n          >\n            Another Example\n          </Button>\n        </div>\n      </div>\n\n      {/*\n        📑 Maybe display a list of events?\n          (uncomment the event and emit line in YourContract.sol! )\n      */}\n      <Events\n        contracts={readContracts}\n        contractName=\"YourContract\"\n        eventName=\"SetPurpose\"\n        localProvider={localProvider}\n        mainnetProvider={mainnetProvider}\n        startBlock={1}\n      />\n\n      <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 256 }}>\n        <Card>\n          Check out all the{\" \"}\n          <a\n            href=\"https://github.com/austintgriffith/scaffold-eth/tree/master/packages/react-app/src/components\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            📦 components\n          </a>\n        </Card>\n\n        <Card style={{ marginTop: 32 }}>\n          <div>\n            There are tons of generic components included from{\" \"}\n            <a href=\"https://ant.design/components/overview/\" target=\"_blank\" rel=\"noopener noreferrer\">\n              🐜 ant.design\n            </a>{\" \"}\n            too!\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            <Button type=\"primary\">Buttons</Button>\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            <SyncOutlined spin /> Icons\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            Date Pickers?\n            <div style={{ marginTop: 2 }}>\n              <DatePicker onChange={() => {}} />\n            </div>\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Slider range defaultValue={[20, 50]} onChange={() => {}} />\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Switch defaultChecked onChange={() => {}} />\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Progress percent={50} status=\"active\" />\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Spin />\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","import { utils } from \"ethers\";\nimport { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { Address, AddressInput } from \"../components\";\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import React from \"react\";\nimport { Tabs } from \"../components\";\n\nexport default function SimpleUI(props) {\n  const page = props.page;\n  const tx = props.tx;\n  const writeContracts = props.writeContracts;\n  const localProvider = props.localProvider;\n  const mainnetProvider = props.mainnetProvider;\n  const blockExplorer = props.blockExplorer;\n  const address = props.address;\n  const readContracts = props.readContracts;\n  const contractConfig = props.contractConfig;\n  const userSigner = props.signer;\n  const price = props.price;\n  const yourLocalBalance = props.yourLocalBalance;\n\n  return (\n    <div className=\"simpleUI\">\n      <Tabs\n        page={page}\n        tx={tx}\n        writeContracts={writeContracts}\n        localProvider={localProvider}\n        mainnetProvider={mainnetProvider}\n        blockExplorer={blockExplorer}\n        address={address} //this is causing issues\n        readContracts={readContracts} //this is causing issues\n        contractConfig={contractConfig}\n        signer={userSigner}\n        price={price}\n        yourLocalBalance={yourLocalBalance}\n      />\n    </div>\n  );\n}\n","import { Button, Col, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, Route, Redirect, Switch, useLocation, useHistory } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  Contract,\n  Faucet,\n  GasGauge,\n  Header,\n  Ramp,\n  ThemeSwitch,\n  NetworkDisplay,\n  FaucetHint,\n  NetworkSwitch,\n  TokenBalance,\n  Dex,\n  Address,\n  Balance,\n  Events,\n  AdvancedModeSwitch,\n} from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport { Transactor, Web3ModalSetup } from \"./helpers\";\nimport { ExampleUI, Hints, Subgraph, SimpleUI } from \"./views\";\nimport { useStaticJsonRPC } from \"./hooks\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.rinkeby; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// 🛰 providers\nconst providers = [\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\n\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"rinkeby\"];\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n  const [advancedMode, setAdvancedMode] = useState(false);\n  const location = useLocation();\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n  const mainnetProvider = useStaticJsonRPC(providers);\n\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n  // 🛰 providers\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // const contractConfig = useContractConfig();\n\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n  const liquidity = useContractReader(readContracts, \"DEX\", \"getLiquidity\", [address]);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"Balloons\", \"purpose\");\n\n  const history = useHistory();\n\n  const toggleAdvancedMode = advancedModeStatus => {\n    setAdvancedMode(advancedModeStatus);\n    history.push(\"/\");\n  };\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    localChainId,\n    myMainnetDAIBalance,\n  ]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  // const [route, setRoute] = useState();\n  // useEffect(() => {\n  //   setRoute(window.location.pathname);\n  // }, [setRoute]);\n\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  // ** TODO: The events are not showing up! Left most of it commented out, but can uncomment and play with! Pretty sure you need to go into DEX.jsx as that is where most of the UI Home-page is being derived from. 😵 📟 Listen for broadcast events\n\n  const EthToTokenSwapEvents = useEventListener(readContracts, \"DEX\", \"EthToTokenSwap\", localProvider, 1);\n  console.log(\"⟠ -->🎈 EthToTokenSwapEvents:\", EthToTokenSwapEvents);\n  const TokenToEthSwapEvents = useEventListener(readContracts, \"DEX\", \"TokenToEthSwap\", localProvider, 1);\n  console.log(\"🎈-->⟠ TokenToEthSwapEvents:\", TokenToEthSwapEvents);\n  // const LiquidityProvidedEvents = useEventListener(readContracts, \"DEX\", \"LiquidityProvided\", 1);\n  // // console.log(\"➕ LiquidityProvidedEvents:\", LiquidityProvidedEvents);\n  // const LiquidityRemovedEvents = useEventListener(readContracts, \"DEX\", \"LiquidityRemoved\", 1);\n  // // console.log(\"➖ LiquidityRemovedEvents:\", LiquidityRemovedEvents);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      {advancedMode && (\n        <NetworkDisplay\n          NETWORKCHECK={NETWORKCHECK}\n          localChainId={localChainId}\n          selectedChainId={selectedChainId}\n          targetNetwork={targetNetwork}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n        />\n      )}\n      {advancedMode && (\n        <Menu style={{ textAlign: \"center\", marginTop: 40 }} selectedKeys={[location.pathname]} mode=\"horizontal\">\n          <Menu.Item key=\"/\">\n            <Link to=\"/swap\">Simple UI</Link>\n          </Menu.Item>\n          <Menu.Item key=\"/home\">\n            <Link to=\"/Home\">Home</Link>\n          </Menu.Item>\n          <Menu.Item key=\"/Events\">\n            <Link to=\"/Events\">Eventlist 📜</Link>\n          </Menu.Item>\n          <Menu.Item key=\"/debug\">\n            <Link to=\"/debug\">Debug Contracts</Link>\n          </Menu.Item>\n          <Menu.Item key=\"/hints\">\n            <Link to=\"/hints\">Hints</Link>\n          </Menu.Item>\n          <Menu.Item key=\"/exampleui\">\n            <Link to=\"/exampleui\">ExampleUI</Link>\n          </Menu.Item>\n          <Menu.Item key=\"/mainnetdai\">\n            <Link to=\"/mainnetdai\">Mainnet DAI</Link>\n          </Menu.Item>\n          <Menu.Item key=\"/subgraph\">\n            <Link to=\"/subgraph\">Subgraph</Link>\n          </Menu.Item>\n        </Menu>\n      )}\n\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"/swap\" />\n        </Route>\n        <Route path=\"/swap\">\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\n          {readContracts && readContracts.DEX && address && localProvider ? (\n            <SimpleUI\n              page=\"swap\"\n              tx={tx}\n              writeContracts={writeContracts}\n              localProvider={localProvider}\n              mainnetProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              address={address} //this is causing issues\n              readContracts={readContracts} //this is causing issues\n              contractConfig={contractConfig}\n              signer={userSigner}\n              price={price}\n              yourLocalBalance={yourLocalBalance}\n            />\n          ) : (\n            \"\"\n          )}\n        </Route>\n        <Route path=\"/pool\">\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\n          {readContracts && readContracts.DEX && address && localProvider ? (\n            <SimpleUI\n              page=\"pool\"\n              tx={tx}\n              writeContracts={writeContracts}\n              localProvider={localProvider}\n              mainnetProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              address={address} //this is causing issues\n              readContracts={readContracts} //this is causing issues\n              contractConfig={contractConfig}\n              signer={userSigner}\n              price={price}\n              yourLocalBalance={yourLocalBalance}\n            />\n          ) : (\n            \"\"\n          )}\n        </Route>\n        <Route exact path=\"/Home\">\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\n          {readContracts && readContracts.DEX && address && localProvider ? (\n            <Dex\n              tx={tx}\n              writeContracts={writeContracts}\n              localProvider={localProvider}\n              mainnetProvider={mainnetProvider}\n              blockExplorer={blockExplorer}\n              address={address} //this is causing issues\n              readContracts={readContracts} //this is causing issues\n              contractConfig={contractConfig}\n              signer={userSigner}\n              price={price}\n            />\n          ) : (\n            \"\"\n          )}\n          {/* TODO: The DEX.jsx file actually logs a bunch of the results so we think that instead of creating completely new event components (or whatever), we would figure out how to work with the txs that are happening as a result of EthersJS calling the respective functions in DEX.jsx. 😵 Lines 321-335 are an example of attempting to place emitted events on the front-page UI. It is not working though for now! */}\n          {/* <div style={{ width: 500, margin: \"auto\", marginTop: 64 }}>\n            <div>👀 DEX Events:</div>\n            <List\n              dataSource={EthToTokenSwapEvents}\n              renderItem={item => {\n                return (\n                  <List.Item key={item.blockNumber}>\n                    <Address value={item.args[0]} ensProvider={localProvider} fontSize={16} />\n                    <Balance tokenOutput={item.args[1]} />\n                    <Balance ethInput={item.args[2]} />\n                  </List.Item>\n                );\n              }}\n            />\n          </div> */}\n        </Route>\n        <Route path=\"/Events\">\n          <Events\n            contracts={readContracts}\n            contractName=\"DEX\"\n            eventName=\"EthToTokenSwap\"\n            localProvider={localProvider}\n            mainnetProvider={mainnetProvider}\n            startBlock={1}\n          />\n\n          <Events\n            contracts={readContracts}\n            contractName=\"DEX\"\n            eventName=\"TokenToEthSwap\"\n            localProvider={localProvider}\n            mainnetProvider={mainnetProvider}\n            startBlock={1}\n          />\n\n          <Events\n            contracts={readContracts}\n            contractName=\"DEX\"\n            eventName=\"LiquidityProvided\"\n            localProvider={localProvider}\n            mainnetProvider={mainnetProvider}\n            startBlock={1}\n          />\n\n          <Events\n            contracts={readContracts}\n            contractName=\"DEX\"\n            eventName=\"LiquidityRemoved\"\n            localProvider={localProvider}\n            mainnetProvider={mainnetProvider}\n            startBlock={1}\n          />\n\n<Events\n            contracts={readContracts}\n            contractName=\"Balloons\"\n            eventName=\"Approval\"\n            localProvider={localProvider}\n            mainnetProvider={mainnetProvider}\n            startBlock={1}\n          />\n        </Route>\n\n        <Route exact path=\"/debug\">\n          {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n\n          <Contract\n            name=\"DEX\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n\n          <Contract\n            name=\"Balloons\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n        </Route>\n        <Route path=\"/hints\">\n          <Hints\n            address={address}\n            yourLocalBalance={yourLocalBalance}\n            mainnetProvider={mainnetProvider}\n            price={price}\n          />\n        </Route>\n        <Route path=\"/exampleui\">\n          <ExampleUI\n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n            purpose={purpose}\n          />\n        </Route>\n        <Route path=\"/mainnetdai\">\n          <Contract\n            name=\"DAI\"\n            customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n            signer={userSigner}\n            provider={mainnetProvider}\n            address={address}\n            blockExplorer=\"https://etherscan.io/\"\n            contractConfig={contractConfig}\n            chainId={1}\n          />\n          {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            */}\n        </Route>\n        <Route path=\"/subgraph\">\n          <Subgraph\n            subgraphUri={props.subgraphUri}\n            tx={tx}\n            writeContracts={writeContracts}\n            mainnetProvider={mainnetProvider}\n          />\n        </Route>\n      </Switch>\n\n      <AdvancedModeSwitch isAdvancedMode={advancedMode} advancedModeChanger={toggleAdvancedMode} />\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <div style={{ display: \"flex\", flex: 1, alignItems: \"center\" }}>\n          {USE_NETWORK_SELECTOR && (\n            <div style={{ marginRight: 20 }}>\n              <NetworkSwitch\n                networkOptions={networkOptions}\n                selectedNetwork={selectedNetwork}\n                setSelectedNetwork={setSelectedNetwork}\n              />\n            </div>\n          )}\n          <Account\n            isAdvancedMode={advancedMode}\n            useBurner={USE_BURNER_WALLET}\n            address={address}\n            localProvider={localProvider}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            price={price}\n            web3Modal={web3Modal}\n            loadWeb3Modal={loadWeb3Modal}\n            logoutOfWeb3Modal={logoutOfWeb3Modal}\n            blockExplorer={blockExplorer}\n          />\n        </div>\n\n        {advancedMode && yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\n          <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\n        )}\n\n        {advancedMode && <TokenBalance name={\"Balloons\"} img={\"🎈\"} address={address} contracts={readContracts} />}\n        <h3>\n          {advancedMode && \"💦💦:\"}\n          {advancedMode && <TokenBalance balance={liquidity} />}\n        </h3>\n        {FaucetHint}\n      </div>\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        {advancedMode && (\n          <Row align=\"middle\" gutter={[4, 4]}>\n            <Col span={8}>\n              <Ramp price={price} address={address} networks={NETWORKS} />\n            </Col>\n\n            <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n              <GasGauge gasPrice={gasPrice} />\n            </Col>\n            <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n              <Button\n                onClick={() => {\n                  window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n                }}\n                size=\"large\"\n                shape=\"round\"\n              >\n                <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                  💬\n                </span>\n                Support\n              </Button>\n            </Col>\n          </Row>\n        )}\n\n        {advancedMode && (\n          <Row align=\"middle\" gutter={[4, 4]}>\n            <Col span={24}>\n              {\n                /*  if the local provider has a signer, let's show the faucet:  */\n                faucetAvailable ? (\n                  <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n                ) : (\n                  \"\"\n                )\n              }\n            </Col>\n          </Row>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"dark\"}>\n      <BrowserRouter>\n        <App subgraphUri={subgraphUri} />\n      </BrowserRouter>\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}